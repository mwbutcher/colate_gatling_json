(ns colate-gatling-json.core
  (:gen-class))
(require  '[clojure.data.json :as json])
(use 'clojure.java.io)

(defn -main [& args]
  (def regexes '(#"node-[0-9a-z]*"
                 #"filemetas"
                 #"catalog-[0-9a-z]*"
                 #"report-[0-9a-z]*"))

  (def f (clojure.java.io/file (first *command-line-args*)))
  (def scenarioName (second *command-line-args*))
  (println "getting json data file names")
  (def fs (file-seq f))
  (def rawFileList (map #(re-find #".*/stats.json" (.toString (.getPath %))) fs))
  (def jsons (sort (filter some? rawFileList)))
  ; the keys in the json generated by gatling include a hash, so we can't just query for known ones.
  ; traverse the sub-object below regex matching keys and pull out mean response times
  (defn getStats [regex]
    (conj
     (map #(get-in
         (json/read-str (slurp %))
         ["contents"
          (re-find (re-pattern (str scenarioName "-[a-z0-9]*")) (slurp %))
          "contents"
          (re-find regex (slurp %))
          "stats" "meanResponseTime"
          "ok"] (println "file: " % " regex: " regex))
          jsons)
     regex))

  (println "getting report dates")
  (spit "output.csv" (conj (map #(re-find #"\d{13}" %) jsons) "reports") :append false)
  (println "extracting perf stats")
  (spit "output.csv" (apply list (map getStats regexes)) :append true))
